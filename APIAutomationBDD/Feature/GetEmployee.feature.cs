// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APIAutomationBDD.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetEmployee")]
    public partial class GetEmployeeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetEmployee.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "GetEmployee", "\tAs a valid user\r\n\tI want to get the list of all employee", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Employee List")]
        [NUnit.Framework.CategoryAttribute("getEmployee")]
        public virtual void GetEmployeeList()
        {
            string[] tagsOfScenario = new string[] {
                    "getEmployee"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Employee List", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("User have the baseuri as \"http://dummy.restapiexample.com/api/v1/employees\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("User send a get request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "employee_name",
                            "employee_salary",
                            "employee_age",
                            "profile_image"});
                table1.AddRow(new string[] {
                            "1",
                            "Tiger Nixon",
                            "320800",
                            "61",
                            ""});
                table1.AddRow(new string[] {
                            "2",
                            "Garrett Winters",
                            "170750",
                            "63",
                            ""});
                table1.AddRow(new string[] {
                            "3",
                            "Ashton Cox",
                            "86000",
                            "66",
                            ""});
                table1.AddRow(new string[] {
                            "4",
                            "Cedric Kelly",
                            "433060",
                            "22",
                            ""});
                table1.AddRow(new string[] {
                            "5",
                            "Airi Satou",
                            "162700",
                            "33",
                            ""});
                table1.AddRow(new string[] {
                            "6",
                            "Brielle Williamson",
                            "372000",
                            "61",
                            ""});
                table1.AddRow(new string[] {
                            "7",
                            "Herrod Chandler",
                            "137500",
                            "61",
                            ""});
                table1.AddRow(new string[] {
                            "8",
                            "Rhona Davidson",
                            "327900",
                            "55",
                            ""});
                table1.AddRow(new string[] {
                            "9",
                            "Colleen Hurst",
                            "205500",
                            "39",
                            ""});
                table1.AddRow(new string[] {
                            "10",
                            "Sonya Frost",
                            "103600",
                            "23",
                            ""});
                table1.AddRow(new string[] {
                            "11",
                            "Jena Gaines",
                            "90560",
                            "30",
                            ""});
                table1.AddRow(new string[] {
                            "12",
                            "Quinn Flynn",
                            "342000",
                            "22",
                            ""});
                table1.AddRow(new string[] {
                            "13",
                            "Charde Marshall",
                            "470600",
                            "36",
                            ""});
                table1.AddRow(new string[] {
                            "14",
                            "Haley Kennedy",
                            "313500",
                            "43",
                            ""});
                table1.AddRow(new string[] {
                            "15",
                            "Tatyana Fitzpatrick",
                            "385750",
                            "19",
                            ""});
                table1.AddRow(new string[] {
                            "16",
                            "Michael Silva",
                            "198500",
                            "66",
                            ""});
                table1.AddRow(new string[] {
                            "17",
                            "Paul Byrd",
                            "725000",
                            "64",
                            ""});
                table1.AddRow(new string[] {
                            "18",
                            "Gloria Little",
                            "237500",
                            "59",
                            ""});
                table1.AddRow(new string[] {
                            "19",
                            "Bradley Greer",
                            "132000",
                            "41",
                            ""});
                table1.AddRow(new string[] {
                            "20",
                            "Dai Rios",
                            "217500",
                            "35",
                            ""});
                table1.AddRow(new string[] {
                            "21",
                            "Jenette Caldwell",
                            "345000",
                            "30",
                            ""});
                table1.AddRow(new string[] {
                            "22",
                            "Yuri Berry",
                            "675000",
                            "40",
                            ""});
                table1.AddRow(new string[] {
                            "23",
                            "Caesar Vance",
                            "106450",
                            "21",
                            ""});
                table1.AddRow(new string[] {
                            "24",
                            "Doris Wilder",
                            "85600",
                            "23",
                            ""});
#line 9
 testRunner.Then("Empolyee list should be returned with status code 200", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
